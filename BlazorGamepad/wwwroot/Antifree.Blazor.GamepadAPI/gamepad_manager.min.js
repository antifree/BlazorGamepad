var Antifree =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./ts/gamepad_manager.ts":
/*!*******************************!*\
  !*** ./ts/gamepad_manager.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Blazor = void 0;
var Blazor;
(function (Blazor) {
    class GamepadManagerType {
        constructor() { }
        register(managerDotNetRef) {
            this.managerDotNetRef = managerDotNetRef;
            this.init();
        }
        updateGamepads() {
            const infos = [];
            const gamepads = window.navigator.getGamepads();
            for (let i = 0; i < gamepads.length; i++) {
                const gamepad = gamepads[i];
                if (gamepad) {
                    infos.push(this.buildGamepadDTO(gamepad));
                }
            }
            return infos;
        }
        findGamepad(index) {
            for (const gamepad of window.navigator.getGamepads()) {
                if (gamepad && gamepad.index === index) {
                    return gamepad;
                }
            }
            return null;
        }
        playVibrationEffect(index, effectName, options) {
            const gamepad = this.findGamepad(index);
            if (gamepad && gamepad.vibrationActuator) {
                gamepad.vibrationActuator.playEffect(effectName, options);
            }
        }
        init() {
            window.addEventListener("gamepadconnected", (ev) => {
                const gamepad = ev.gamepad;
                this.managerDotNetRef.invokeMethodAsync("OnGamepadConnectedHandler", { gamepad: this.buildGamepadDTO(gamepad) });
            });
            window.addEventListener("gamepaddisconnected", (ev) => {
                const gamepad = ev.gamepad;
                this.managerDotNetRef.invokeMethodAsync("OnGamepadDisconnectedHandler", { gamepad: this.buildGamepadDTO(gamepad) });
            });
            this.managerDotNetRef.invokeMethodAsync("SetReady");
        }
        buildGamepadDTO(gamepad) {
            return {
                id: gamepad.id,
                index: gamepad.index,
                mapping: gamepad.mapping,
                axes: gamepad.axes.map(n => n),
                buttons: gamepad.buttons.map(b => { return { pressed: b.pressed, value: b.value }; }),
                connected: gamepad.connected,
                timestamp: gamepad.timestamp,
                supportVibration: gamepad.vibrationActuator != null
            };
        }
    }
    Blazor.GamepadManager = new GamepadManagerType();
})(Blazor = exports.Blazor || (exports.Blazor = {}));


/***/ }),

/***/ 0:
/*!*************************************!*\
  !*** multi ./ts/gamepad_manager.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./ts/gamepad_manager.ts */"./ts/gamepad_manager.ts");


/***/ })

/******/ });
//# sourceMappingURL=gamepad_manager.min.js.map